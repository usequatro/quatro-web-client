service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
    function isCurrentUser(userId) {
      return request.auth.uid == userId;
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    function isUserIdChanging() {
      return incomingData().diff(existingData()).affectedKeys().hasAny(['userId']);
    }

    match /tasks/{docId} {
      allow create: if isSignedIn() && isCurrentUser(incomingData().userId);
      allow update: if isSignedIn() && isCurrentUser(existingData().userId) && !isUserIdChanging();
      allow read, list, delete: if isSignedIn() && isCurrentUser(existingData().userId);
    }

    match /recurringConfigs/{docId} {
      allow create: if isSignedIn() && isCurrentUser(incomingData().userId);
      allow update: if isSignedIn() && isCurrentUser(existingData().userId) && !isUserIdChanging();
      allow read, list, delete: if isSignedIn() && isCurrentUser(existingData().userId);
    }

    function hasInternalCalendarKeys()data {
      return keys().hasAny(['watcherChannelId', 'watcherResourceId', 'watcherExpiration']);
    }

    match /calendars/{docId} {
      allow create: if isSignedIn()
        && isCurrentUser(incomingData().userId)
        && !hasInternalCalendarKeys(incomingData().data);
      allow update: if isSignedIn()
        && isCurrentUser(existingData().userId)
        && !hasInternalCalendarKeys(incomingData().data)
        && !isUserIdChanging();
      allow read, list, delete: if isSignedIn() && isCurrentUser(existingData().userId);
    }

    match /userExternalConfigs/{docId} {
      allow create, list, update, delete: if false;
      allow read: if isSignedIn() && isCurrentUser(docId);
    }
  }
}
