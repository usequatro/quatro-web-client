service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
    function isCurrentUser(userId) {
      return request.auth.uid == userId;
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    // function notReceiving(field) {
    //   return !(field in incomingData());
    // }

    // function notModifying(field) {
    //   return incomingData()[field] == existingData()[field];
    // }

    // function notUpdating(field) {
    //   return notReceiving(field) || notModifying(field);
    // }

    // @link https://firebase.google.com/docs/firestore/security/rules-fields#allowing_only_certain_fields_to_be_changed
    function allowlistedChanges(keys) {
      return incomingData().diff(existingData()).affectedKeys().hasOnly(keys);
    }

    match /tasks/{docId} {
      allow create: if isSignedIn() && isCurrentUser(incomingData().userId);
      allow read, list, update, delete: if isSignedIn() && isCurrentUser(existingData().userId);
    }

    match /recurringConfigs/{docId} {
      allow create: if isSignedIn() && isCurrentUser(incomingData().userId);
      allow read, list, update, delete: if isSignedIn() && isCurrentUser(existingData().userId);
    }

    match /calendars/{docId} {
      allow create: if isSignedIn() && isCurrentUser(incomingData().userId);
      allow read, list, update, delete: if isSignedIn() && isCurrentUser(existingData().userId);
    }

    match /userExternalConfigs/{docId} {
      allow list, delete: if false;
      allow read: if isSignedIn() && isCurrentUser(docId);
      allow create, update: if isSignedIn() && isCurrentUser(docId) && allowlistedChanges(['defaultCalendarId']);
    }
  }
}
